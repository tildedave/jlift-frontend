
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Feb 20 15:47:53 EST 2008
//----------------------------------------------------

package jliftfrontend.policy.parse;

import java_cup.runtime.*;
import jliftfrontend.policy.*;
import jliftfrontend.policy.ProcedurePolicyElement.ProcedurePolicyElementKind;
import java.util.*;

/** CUP v0.10k generated parser.
  * @version Wed Feb 20 15:47:53 EST 2008
  */
public class PolicyParser
 extends java_cup.runtime.lr_parser
{
  /** Default constructor. */
  public PolicyParser() {super();}

  /** Constructor which sets the default scanner. */
  public PolicyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\004\000\002\005\003\000\002\005\002" +
    "\000\002\004\006\000\002\004\006\000\002\004\004\000" +
    "\002\004\003\000\002\006\005\000\002\010\005\000\002" +
    "\007\005\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\012\005\000\002\012\003\000\002\014\007" +
    "\000\002\013\006\000\002\013\006\000\002\013\006\000" +
    "\002\013\006\000\002\013\003\000\002\015\004\000\002" +
    "\015\003\000\002\016\003\000\002\016\002\000\002\017" +
    "\007\000\002\020\007\000\002\021\003\000\002\021\003" +
    "\000\002\022\004\000\002\022\003\000\002\023\003\000" +
    "\002\023\002\000\002\030\003\000\002\030\005\000\002" +
    "\030\005\000\002\030\003\000\002\024\006\000\002\025" +
    "\013\000\002\026\003\000\002\026\003\000\002\027\004" +
    "\000\002\033\004\000\002\033\004\000\002\032\004\000" +
    "\002\032\003\000\002\031\003\000\002\031\002\000\002" +
    "\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\145\000\010\002\uffcf\016\015\017\014\001\002\000" +
    "\010\002\uffd1\016\uffd1\017\uffd1\001\002\000\010\002\uffd0" +
    "\016\015\017\014\001\002\000\004\006\uffd7\001\002\000" +
    "\004\002\uffce\001\002\000\004\002\146\001\002\000\004" +
    "\006\145\001\002\000\004\006\144\001\002\000\004\006" +
    "\uffd6\001\002\000\010\004\021\005\017\025\020\001\002" +
    "\000\004\005\016\001\002\000\004\006\uffd5\001\002\000" +
    "\012\013\000\015\000\025\136\035\142\001\002\000\006" +
    "\013\uffff\015\uffff\001\002\000\010\013\uffdd\015\uffdd\035" +
    "\140\001\002\000\006\013\uffda\015\uffda\001\002\000\006" +
    "\013\025\015\024\001\002\000\010\006\uffde\020\035\021" +
    "\040\001\002\000\004\030\026\001\002\000\004\024\027" +
    "\001\002\000\004\005\030\001\002\000\004\014\031\001" +
    "\002\000\004\015\032\001\002\000\010\006\uffde\020\035" +
    "\021\040\001\002\000\010\006\uffe2\020\uffe2\021\uffe2\001" +
    "\002\000\010\006\uffe3\020\uffe3\021\uffe3\001\002\000\006" +
    "\005\131\025\020\001\002\000\010\006\uffdf\020\035\021" +
    "\040\001\002\000\010\006\uffe0\020\uffe0\021\uffe0\001\002" +
    "\000\004\005\042\001\002\000\004\006\uffd8\001\002\000" +
    "\004\007\043\001\002\000\016\005\050\010\uffe6\022\046" +
    "\032\054\033\052\034\053\001\002\000\016\005\uffea\010" +
    "\uffea\022\uffea\032\uffea\033\uffea\034\uffea\001\002\000\016" +
    "\005\uffe8\010\uffe8\022\uffe8\032\uffe8\033\uffe8\034\uffe8\001" +
    "\002\000\004\005\124\001\002\000\016\005\050\010\uffe7" +
    "\022\046\032\054\033\052\034\053\001\002\000\004\013" +
    "\120\001\002\000\004\010\117\001\002\000\004\013\114" +
    "\001\002\000\004\013\111\001\002\000\004\013\055\001" +
    "\002\000\010\027\061\030\065\031\056\001\002\000\004" +
    "\024\107\001\002\000\006\014\ufff0\026\ufff0\001\002\000" +
    "\006\014\ufff4\026\ufff4\001\002\000\004\024\105\001\002" +
    "\000\006\014\ufff3\026\ufff3\001\002\000\006\014\ufff2\026" +
    "\ufff2\001\002\000\006\014\103\026\102\001\002\000\004" +
    "\024\066\001\002\000\006\005\067\007\070\001\002\000" +
    "\006\014\ufff8\026\ufff8\001\002\000\010\005\072\010\074" +
    "\025\073\001\002\000\006\014\ufff6\026\ufff6\001\002\000" +
    "\006\010\ufffc\024\100\001\002\000\004\024\075\001\002" +
    "\000\006\014\ufff9\026\ufff9\001\002\000\004\010\076\001" +
    "\002\000\006\014\ufffa\026\ufffa\001\002\000\004\010\101" +
    "\001\002\000\004\010\ufffd\001\002\000\006\014\ufffb\026" +
    "\ufffb\001\002\000\010\027\061\030\065\031\056\001\002" +
    "\000\016\005\uffee\010\uffee\022\uffee\032\uffee\033\uffee\034" +
    "\uffee\001\002\000\006\014\ufff1\026\ufff1\001\002\000\006" +
    "\005\067\007\070\001\002\000\006\014\ufff7\026\ufff7\001" +
    "\002\000\006\005\067\007\070\001\002\000\006\014\ufff5" +
    "\026\ufff5\001\002\000\010\027\061\030\065\031\056\001" +
    "\002\000\006\014\113\026\102\001\002\000\016\005\uffec" +
    "\010\uffec\022\uffec\032\uffec\033\uffec\034\uffec\001\002\000" +
    "\010\027\061\030\065\031\056\001\002\000\006\014\116" +
    "\026\102\001\002\000\016\005\uffed\010\uffed\022\uffed\032" +
    "\uffed\033\uffed\034\uffed\001\002\000\010\006\uffe5\020\uffe5" +
    "\021\uffe5\001\002\000\010\027\061\030\065\031\056\001" +
    "\002\000\006\014\122\026\102\001\002\000\016\005\uffeb" +
    "\010\uffeb\022\uffeb\032\uffeb\033\uffeb\034\uffeb\001\002\000" +
    "\016\005\uffe9\010\uffe9\022\uffe9\032\uffe9\033\uffe9\034\uffe9" +
    "\001\002\000\004\013\125\001\002\000\010\027\061\030" +
    "\065\031\056\001\002\000\006\014\127\026\102\001\002" +
    "\000\016\005\uffef\010\uffef\022\uffef\032\uffef\033\uffef\034" +
    "\uffef\001\002\000\010\006\uffe1\020\uffe1\021\uffe1\001\002" +
    "\000\006\013\000\025\136\001\002\000\004\013\133\001" +
    "\002\000\010\027\061\030\065\031\056\001\002\000\006" +
    "\014\135\026\102\001\002\000\010\006\uffe4\020\uffe4\021" +
    "\uffe4\001\002\000\006\013\ufffe\015\ufffe\001\002\000\004" +
    "\006\uffd9\001\002\000\004\025\141\001\002\000\006\013" +
    "\uffdc\015\uffdc\001\002\000\004\025\143\001\002\000\006" +
    "\013\uffdb\015\uffdb\001\002\000\010\002\uffd3\016\uffd3\017" +
    "\uffd3\001\002\000\010\002\uffd4\016\uffd4\017\uffd4\001\002" +
    "\000\004\002\001\001\002\000\010\002\uffd2\016\uffd2\017" +
    "\uffd2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\145\000\022\024\005\025\012\026\010\027\011\031" +
    "\006\032\004\033\003\034\007\001\001\000\002\001\001" +
    "\000\014\024\005\025\012\026\010\027\011\033\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\021\030\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\032" +
    "\020\033\021\036\022\035\023\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\017\032\020\033\021\036\022" +
    "\035\023\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\131\001\001\000\010\017\032\020\033\021" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\013\044\014\043\015" +
    "\046\016\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\122\014\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\006\061\007\062\010" +
    "\057\011\056\012\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\061\007\062\010\057\011\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\105\001\001" +
    "\000\002\001\001\000\004\004\107\001\001\000\002\001" +
    "\001\000\014\006\061\007\062\010\057\011\056\012\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\006" +
    "\061\007\062\010\057\011\056\012\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\006" +
    "\061\007\062\010\057\011\056\012\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\061\007\062\010\057\011\056\012\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\006\061" +
    "\007\062\010\057\011\056\012\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PolicyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PolicyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PolicyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PolicyParser$actions {
  private final PolicyParser parser;

  /** Constructor */
  CUP$PolicyParser$actions(PolicyParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PolicyParser$do_action(
    int                        CUP$PolicyParser$act_num,
    java_cup.runtime.lr_parser CUP$PolicyParser$parser,
    java.util.Stack            CUP$PolicyParser$stack,
    int                        CUP$PolicyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PolicyParser$result;

      /* select the action based on the action number */
      switch (CUP$PolicyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // policy ::= policy_list 
            {
              JLiftPolicy RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		 RESULT = new JLiftPolicy(l); 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(26/*policy*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // policy_list ::= 
            {
              List RESULT = null;
		  RESULT = new LinkedList();  
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(23/*policy_list*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // policy_list ::= policy_list_nonempty 
            {
              List RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		 RESULT = l;  
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(23/*policy_list*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // policy_list_nonempty ::= policy_part 
            {
              List RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		PolicyStatement p = (PolicyStatement)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		 List l = new LinkedList();  l.add(p);  RESULT = l;  
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(24/*policy_list_nonempty*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // policy_list_nonempty ::= policy_list_nonempty policy_part 
            {
              List RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		PolicyStatement p = (PolicyStatement)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		 l.add(p);  RESULT = l; 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(24/*policy_list_nonempty*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // policy_part ::= principal_policy SEMI 
            {
              PolicyStatement RESULT = null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).right;
		PrincipalPolicyStatement pp = (PrincipalPolicyStatement)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).value;
		 RESULT = pp; 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(25/*policy_part*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // policy_part ::= class_policy SEMI 
            {
              PolicyStatement RESULT = null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).right;
		ClassPolicyStatement cp = (ClassPolicyStatement)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).value;
		 RESULT = cp; 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(25/*policy_part*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // principal_policy ::= PRINCIPAL ID 
            {
              PrincipalPolicyStatement RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		 RESULT = new PrincipalPolicyStatement(n); 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(21/*principal_policy*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // class_policy ::= class_policy_param 
            {
              ClassPolicyStatement RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		ClassPolicyStatement c = (ClassPolicyStatement)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		  RESULT = c; 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(20/*class_policy*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // class_policy ::= class_policy_noparam 
            {
              ClassPolicyStatement RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		ClassPolicyStatement c = (ClassPolicyStatement)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		  RESULT = c; 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(20/*class_policy*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // class_policy_param ::= CLASS class_name LPAREN PARAM COLON ID RPAREN DEF member_policy_list 
            {
              ClassPolicyStatement RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-7)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		  RESULT = new ClassPolicyStatement(c,l,n);  
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(19/*class_policy_param*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // class_policy_noparam ::= CLASS class_name DEF member_policy_list 
            {
              ClassPolicyStatement RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		  RESULT = new ClassPolicyStatement(c,l,null);  
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(18/*class_policy_noparam*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // class_name ::= regexp 
            {
              String RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		 RESULT = r; 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(22/*class_name*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // class_name ::= ID DOT STAR 
            {
              String RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).value;
		 RESULT = s + "\\..*"; 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(22/*class_name*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // class_name ::= CLASSNAME DOT STAR 
            {
              String RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).value;
		 RESULT = s + "\\..*"; 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(22/*class_name*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // class_name ::= CLASSNAME 
            {
              String RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		 RESULT = s; 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(22/*class_name*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // member_policy_list ::= 
            {
              List RESULT = null;
		  RESULT = new LinkedList();  
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(17/*member_policy_list*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // member_policy_list ::= member_policy_list_nonempty 
            {
              List RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		  RESULT = l;  
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(17/*member_policy_list*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // member_policy_list_nonempty ::= member_policy 
            {
              List RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		MemberPolicyStatement m = (MemberPolicyStatement)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		  List l = new LinkedList();  l.add(m);  RESULT = l;  
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(16/*member_policy_list_nonempty*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // member_policy_list_nonempty ::= member_policy_list_nonempty member_policy 
            {
              List RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		MemberPolicyStatement m = (MemberPolicyStatement)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		  l.add(m);  RESULT = l;  
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(16/*member_policy_list_nonempty*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // member_policy ::= procedure_policy 
            {
              MemberPolicyStatement RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		ProcedurePolicyStatement m = (ProcedurePolicyStatement)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		  RESULT = m;  
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(15/*member_policy*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // member_policy ::= field_policy 
            {
              MemberPolicyStatement RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		FieldPolicyStatement f = (FieldPolicyStatement)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		  RESULT = f;  
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(15/*member_policy*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // field_policy ::= FIELD regexp LPAREN policy_descriptor_list RPAREN 
            {
              FieldPolicyStatement RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).value;
		 RESULT = new FieldPolicyStatement(n, l); 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(14/*field_policy*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // procedure_policy ::= METHOD ID LBRACE procedure_policy_member_list RBRACE 
            {
              ProcedurePolicyStatement RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).value;
		 RESULT = new ProcedurePolicyStatement(n, l); 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(13/*procedure_policy*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // procedure_policy_member_list ::= 
            {
              List RESULT = null;
		  RESULT = new LinkedList();  
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(12/*procedure_policy_member_list*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // procedure_policy_member_list ::= procedure_policy_member_list_nonempty 
            {
              List RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		 RESULT = l; 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(12/*procedure_policy_member_list*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // procedure_policy_member_list_nonempty ::= procedure_policy_member 
            {
              List RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		ProcedurePolicyElement m = (ProcedurePolicyElement)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		 List l = new LinkedList(); l.add(m);  RESULT = l; 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(11/*procedure_policy_member_list_nonempty*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // procedure_policy_member_list_nonempty ::= procedure_policy_member_list_nonempty procedure_policy_member 
            {
              List RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		ProcedurePolicyElement m = (ProcedurePolicyElement)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		 l.add(m);  RESULT = l; 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(11/*procedure_policy_member_list_nonempty*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // procedure_policy_member ::= local_policy 
            {
              ProcedurePolicyElement RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		LocalPolicyStatement l = (LocalPolicyStatement)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		 RESULT = l; 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(9/*procedure_policy_member*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // procedure_policy_member ::= ID LPAREN policy_descriptor_list RPAREN 
            {
              ProcedurePolicyElement RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-3)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).right;
		List pd = (List)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).value;
		 RESULT = new ProcedurePolicyElement(ProcedurePolicyElement.FORMAL, n, pd); 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(9/*procedure_policy_member*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // procedure_policy_member ::= RETURNVALUE LPAREN policy_descriptor_list RPAREN 
            {
              ProcedurePolicyElement RESULT = null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).right;
		List pd = (List)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).value;
		 RESULT = new ProcedurePolicyElement(ProcedurePolicyElement.RETURNVALUE, pd); 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(9/*procedure_policy_member*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // procedure_policy_member ::= RETURN LPAREN policy_descriptor_list RPAREN 
            {
              ProcedurePolicyElement RESULT = null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).right;
		List pd = (List)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).value;
		 RESULT = new ProcedurePolicyElement(ProcedurePolicyElement.RETURN, pd); 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(9/*procedure_policy_member*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // procedure_policy_member ::= BEGIN LPAREN policy_descriptor_list RPAREN 
            {
              ProcedurePolicyElement RESULT = null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).right;
		List pd = (List)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).value;
		 RESULT = new ProcedurePolicyElement(ProcedurePolicyElement.BEGIN, pd); 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(9/*procedure_policy_member*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // local_policy ::= LOCAL ID LPAREN policy_descriptor_list RPAREN 
            {
              LocalPolicyStatement RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-3)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).right;
		List pd = (List)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).value;
		 RESULT = new LocalPolicyStatement(n, pd); 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(10/*local_policy*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // policy_descriptor_list ::= policy_descriptor 
            {
              List RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		PolicyDescriptor d = (PolicyDescriptor)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		 List l = new LinkedList();  l.add(d);  RESULT = l; 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(8/*policy_descriptor_list*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // policy_descriptor_list ::= policy_descriptor_list COMMA policy_descriptor 
            {
              List RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		PolicyDescriptor d = (PolicyDescriptor)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		 l.add(d); RESULT = l; 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(8/*policy_descriptor_list*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // policy_descriptor ::= arraybase_label_descriptor 
            {
              PolicyDescriptor RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		ArrayBaseLabelPolicyDescriptor a = (ArrayBaseLabelPolicyDescriptor)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		  RESULT = a;  
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(7/*policy_descriptor*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // policy_descriptor ::= label_descriptor 
            {
              PolicyDescriptor RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		LabelPolicyDescriptor l = (LabelPolicyDescriptor)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		  RESULT = l;  
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(7/*policy_descriptor*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // policy_descriptor ::= param_descriptor 
            {
              PolicyDescriptor RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		ParamPolicyDescriptor p = (ParamPolicyDescriptor)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		  RESULT = p;  
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(7/*policy_descriptor*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // arraybase_label_descriptor ::= ARRAYBASE COLON label 
            {
              ArrayBaseLabelPolicyDescriptor RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		  RESULT = new ArrayBaseLabelPolicyDescriptor(s);  
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(5/*arraybase_label_descriptor*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // param_descriptor ::= PARAM COLON label 
            {
              ParamPolicyDescriptor RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		  RESULT = new ParamPolicyDescriptor(s);  
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(6/*param_descriptor*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // label_descriptor ::= LABEL COLON label 
            {
              LabelPolicyDescriptor RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		  RESULT = new LabelPolicyDescriptor(s);  
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(4/*label_descriptor*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // label ::= ID 
            {
              String RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		   RESULT = n; 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(2/*label*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // label ::= LBRACE RBRACE 
            {
              String RESULT = null;
		   RESULT = "{}";  
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(2/*label*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // label ::= LBRACE STAR COLON RBRACE 
            {
              String RESULT = null;
		   RESULT = "{" + "*:" + "}";  
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(2/*label*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // label ::= LBRACE ID opt_colon RBRACE 
            {
              String RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).value;
		   RESULT = "{" + n + c + "}";  
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(2/*label*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // opt_colon ::= 
            {
              String RESULT = null;
		 RESULT = ""; 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(3/*opt_colon*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // opt_colon ::= COLON 
            {
              String RESULT = null;
		 RESULT = ":"; 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(3/*opt_colon*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // regexp ::= ID STAR 
            {
              String RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).value;
		 RESULT = n + ".*"; 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(1/*regexp*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // regexp ::= STAR 
            {
              String RESULT = null;
		 RESULT = ".*"; 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(1/*regexp*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // regexp ::= ID 
            {
              String RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		 RESULT = n; 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(1/*regexp*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= policy EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).right;
		JLiftPolicy start_val = (JLiftPolicy)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).value;
		RESULT = start_val;
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$PolicyParser$parser.done_parsing();
          return CUP$PolicyParser$result;

          default:
            {
              throw new Exception(
                 "Invalid action number found in internal parse table");
            }

        }
    }
}

